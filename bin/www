#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('my-porject:server');
const http = require('http');
const opn = require('opn')
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//设置跨域访问
app.all('*', function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With");
    res.header("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS");
    res.header("X-Powered-By", ' 3.2.1');
    res.header("Content-Type", "text/html;charset=utf-8");
    next();
});

/**
 * Create HTTP server.
 */

const server = http.Server(app);
const io = require('socket.io')(server)
io.on('connection', function(socket) {
    // console.log('a user connected ');
    // socket.on('disconnect', function() {
    //   console.log('user disconnected');
    // });
    socket.on('chat message', function(msg) {
        io.emit('chat message', msg);
    });
});
var chat = io
    .of('/chat')
    .on('connection', function(socket) {
        socket.emit('a message', { //触发成功
            that: 'only',
            '/chat': 'will get'
        });
        chat.emit('a message', { //触发成功
            everyone: 'in',
            '/chat': 'will get'
        });
        chat.on('hi!', function(msg) { //接收不到
            console.log('服务端chat：', msg)
        })
        socket.on('hi!', function(msg) { //可以接收的到
            console.log('服务端socket：', msg)
        })
    });

var news = io
    .of('/news')
    .on('connection', function(socket) {
        socket.emit('a news', { news: 'item' });

        socket.on('woot', function(msg) {
            console.log('服务端socket：', msg)
        })
    });

/**
 * Listen on provided port, on all network interfaces.
 */

const uri = 'http://localhost:' + port
// opn(uri)
console.log(uri)

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}